Part D––––––––––––––

1. What does git help do?

	Provides Git commands used in various situations.

2. What does -ag cause git help to do?

	Lists available git commands and also lists common 	git guides.

Part E––––––––––––––

1. What are those commands doing?

	These commands are setting up git so that every 	command records your name & email. Other words, these 	commands get and set the repository or global 	
	options.

2. What is the purpose of —global?

	Makes it so that all files are aware of the config. 	settings for all the files.

Part F––––––––––––––

1. By default any file that starts with . is hidden. How do you display a hidden file?

	The command is ls -a. 


2. Run this command to show the hidden files in the current directory. Are there any?

	No.

3. Now run the following command.

	Done.

4. Check for hidden files again. What was created by git init?

	.git file

5. What do you think would happen if you delete .git?

	You would have to initialize git again. We wouldn’t 
	be able to use git with this directory.

6. Using your observations to the previous questions, answer the following. You find an old project on your hard drive. You do not remember if it is a under version control. What could you look for to determine if the project is being managed using git?

	You would go into the directory and run ls -a to see 	if the .git file is present.

Part G––––––––––––––

1. What kind of information does git status report?

	Which master you are on, and which commits have been 	committed, as well as changes to be committed.

2. What does git add names.txt do?

	This adds the file to the commit cache.

3. What does git commit -m "Add our names." do?

	This adds the file to the commit log.

4. What does git add . do? What do you think . means?

	Adds all untracked files in the current directory to 
	the git cache. The . adds all.

5. What does git commit (without -m) do?

	Opens your git log so that you can input message for 
	the commit.

6. If you want to write a more detailed commit message (which is good practice) what command would you use?
	
	git commit (without - m)

7. What does git log do?
	
	Lists all commits and details.

Part H––––––––––––––

1. Below write each file name under the state that its changes are currently in. Compose a definition for each state.
	
	STAGED:
	names.txt 
	Files that were added but not recommitted.

	UNSTAGED: 
	movies.txt
	Files that have previously been committed but not 	updated.

	UNTRACKED: 
	books.txt
	Files that haven’t been added.

2. If you run git commit what changes will be committed (don't do it)?

	names.txt

3. What command do you run to stage changes?

	add . 

4. What command do you run to unstage changes?

	git reset <filename> 

–––––Run the following commands–––––

1. What does git diff display?

	Shows the changes made between the files committed to 	git and the current state of files on computer. Shows 	the changes for unstaged files.  

2. What does git diff --cached display?

	Shows the changes made for staged files. 

3. Formulate a sequence of commands to unstage changes to names.txt, and stage the changes to movies.txt. Execute your commands and confirm they worked.

	Git reset names.txt
	Git add movies.txt

To confirm they work: git status

4. Edit movies.txt, change any one of the movies, and save it. Then run git status. What do you observe? Explain what you think is going on.

	There is now an unstaged copy of movies.txt because 
	changes were made. Two copies now exist, one that is 	still staged and one that is unstaged. 

5. Delete names.txt. Then run git status. What do you observe? Explain what you think is going on.

	names.txt is now unstaged and deleted. This occurred 
	because we deleted it.

6. Rename movies.txt to last-movies. Run git status. Observe and explain.

	Now it is treating the movies.txt with the last-	movies as a different file, now named last-movies.
	Although it still records that movies.txt has been 
	deleted and the change is staged.

7. Formulate a sequence of commands to stage all changes including the untracked file and commit (with any reasonable message you like). Execute them.

	Git add .
	Git commit “added books, renamed movies, 		deleted names”

8. In git vernacular, index, cache, and stage all refer to the same thing. What does it hold?

	It holds all of the added files that have not yet 
	been committed.

9. Why have a stage? Why not just commit all changes since the last commit?

	To help with version control, make sure you are not 	messing with other people’s copies. Helps save and 	stay updated with changes.

	

Part I––––––––––––––

1. What does git reset --soft ``"HEAD^"do?

	Removes the most recent commit from the git log.

2. What does git reset --hard ``"HEAD^"``do?

	Moved the first commit to the top and removed 		everything above (more recent). 


4. What is the difference between --hard and --soft?

	With —-soft you will see files that are staged and 	ready to commit, with —-hard files changed at any 	point will not be seen anywhere.
 
3. What do you think HEAD means?

	HEAD refers to the branch or commit currently checked 
	out.
	

4. What do you think HEAD^ means?

	HEAD^ refers to the parent of HEAD.






















